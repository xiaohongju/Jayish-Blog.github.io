<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java基础笔记</title>
      <link href="/2023/05/31/Java%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/05/31/Java%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Java笔记"><a href="#Java笔记" class="headerlink" title="Java笔记"></a>Java笔记</h1><h2 id="一、数据类型"><a href="#一、数据类型" class="headerlink" title="一、数据类型"></a>一、数据类型</h2><h3 id="1-基本数据类型"><a href="#1-基本数据类型" class="headerlink" title="1.基本数据类型"></a>1.基本数据类型</h3><p><strong>1.整数类型</strong></p><ol><li>byte</li><li>short</li><li>int</li><li>long 建议使用大写L</li></ol><p><strong>2.浮点类型</strong></p><ol><li>float<ul><li>有限、离散、舍入误差、大约、接近但不等于</li></ul></li><li>double</li><li>避免用浮点类型比较数值</li><li>BigDecimal 数学工具类</li></ol><p><strong>3.字符类型</strong></p><ol><li>char占2个字节 对应Unicode码</li><li>转义字符</li></ol><p><strong>4.布尔类型</strong></p><ol><li>boolean</li><li>只占一位，而且只有两个值true和false，常用语判断</li></ol><p><strong>5.类型转换</strong></p><ol><li><p>低————–&gt;高</p><ul><li>byte, short, char–&gt;int–&gt;long–&gt;float–&gt;double</li></ul></li><li><p>运算中，不同类型的数据先转化为同一类型，然后进行运算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>强制类型转换  高 --&gt;低</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> (<span class="type">byte</span>) i;<span class="comment">//导致内存溢出</span></span><br><span class="line"><span class="number">2.</span>自动类型转换  低 --&gt;高</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> i;</span><br></pre></td></tr></table></figure></li><li><p>不能对布尔值进行转换。</p></li><li><p>不能把对象类型转换为不相干的类型。</p></li><li><p>在把高容量转换到低容量的时候，强制转换。</p></li><li><p>转换的时候可能存在内存溢出，或者精度问题。</p></li></ol><h3 id="2-变量类型"><a href="#2-变量类型" class="headerlink" title="2.变量类型"></a>2.变量类型</h3><ol><li>Java时一种强类型语言，每个变量都必须声明其类型。</li><li>Java变量是程序中最基本的存储单元，其要素包括变量名，变量类型和作用域。<ul><li><strong>注意事项</strong></li><li>每个变量都有类型，类型可以是基本类型，也可以是引用类型。</li><li>变量名必须是合法的标识符。</li><li>变量声明是一条完整的语句，因此每一个声明都必须以分号结束。</li></ul></li><li><strong>变量作用域</strong><ul><li>类变量      1.加关键字static；2.从属于类，随着类存在或消亡</li><li>实例变量  1.从属于对象；2.未初始化值，会给默认值(0、0.0、null、false)</li><li>局部变量  1.必须声明和初始化值；2.作用域在方法里面</li></ul></li></ol><h3 id="3-常量类型"><a href="#3-常量类型" class="headerlink" title="3.常量类型"></a>3.常量类型</h3><ol><li><p>常量(Constant)：初始化(initialize)后不能再改变值！不会变动的值。</p></li><li><p>所谓常量可以理解成一种特殊的变量，它的值被设定后，在程序运行过程中不允许被改变。</p></li><li><p>常量名一般使用大写字符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-变量的命名规范"><a href="#4-变量的命名规范" class="headerlink" title="4.变量的命名规范"></a>4.变量的命名规范</h3><ol><li>所有变量、方法、类名：<strong>见名知意</strong></li><li>类成员变量：首字母小写和驼峰原则 ex：monthSalary   lastName</li><li>局部变量：首字母小写和驼峰原则</li><li>常量：大写字母和下划线    ex：MAX_VALUE</li><li>类名：首字母大写和驼峰原则 ex：Man, GoodMan</li><li>方法名：首字母小写和驼峰原则  ex：run(), testRun()</li></ol><h3 id="5-运算符"><a href="#5-运算符" class="headerlink" title="5.运算符"></a>5.运算符</h3><ol><li><p>算术运算符 ：+，-，*，&#x2F;，%，++，–</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">面试题</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span> + a + b);<span class="comment">//输出1020</span></span><br><span class="line">System.out.println(a + b + <span class="string">&quot;&quot;</span>);<span class="comment">//输出30</span></span><br></pre></td></tr></table></figure></li><li><p>赋值运算符：&#x3D;</p></li><li><p>关系运算符：&gt;，&lt;，&gt;&#x3D;，&lt;&#x3D;，&#x3D;&#x3D;，!&#x3D;，instanceof</p></li><li><p>逻辑运算符：&amp;&amp;，||，！</p></li><li><p>位运算符：&amp;，|，^，&gt;&gt;（左移就是 &#x2F;2），&lt;&lt; （右移就是 *2），&gt;&gt;&gt;  <strong>（了解）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">面试题</span><br><span class="line">计算机最快方式算出<span class="number">2</span>*<span class="number">8</span>=<span class="number">16</span></span><br><span class="line">System.out.println(<span class="number">2</span>&lt;&lt;<span class="number">3</span>);<span class="comment">//输出16</span></span><br></pre></td></tr></table></figure></li><li><p>条件运算符：？ ： （一真大师） <strong>必须掌握</strong></p></li><li><p>扩展赋值运算符：+&#x3D;，-&#x3D;，*&#x3D;，&#x2F;&#x3D;</p></li><li><p>Math类</p></li><li><p>很多运算我们会使用工具类来操作</p></li></ol><h3 id="6-包机制"><a href="#6-包机制" class="headerlink" title="6.包机制"></a>6.包机制</h3><ol><li>包的本质就是文件夹。（防止重名）</li><li>一般利用公司域名倒置作为包名。ex：com.baidu.www </li><li>为了能够使用某一个包的成员，我们需要在Java程序中明确导入该包。使用 import 语句完成。</li></ol><h3 id="7-JavaDoc-生成文档"><a href="#7-JavaDoc-生成文档" class="headerlink" title="7.JavaDoc 生成文档"></a>7.JavaDoc 生成文档</h3><ol><li>参数信息<ul><li>@author 作者名</li><li>@version 版本号</li><li>@since 指明需要最早使用的jdk版本</li><li>@param 参数名</li><li>@return 返回值情况</li><li>@throws 异常抛出情况</li></ul></li><li>在文件执行Dos命令窗口，javadoc -encoding UTF-8 -charset UTF-8 类名.java</li><li>用IDEA生成JavaDoc文档：选中要生成的包–&gt;Tools–&gt;Generate JavaDoc–&gt;Output directory(路径)–&gt;locale(zh_CN)–&gt;Other command line arguments(-encoding utf-8 -charset utf-8)。</li></ol><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><h2 id="二、流程控制"><a href="#二、流程控制" class="headerlink" title="二、流程控制"></a>二、流程控制</h2><h3 id="1-Scanner对象"><a href="#1-Scanner对象" class="headerlink" title="1.Scanner对象"></a>1.Scanner对象</h3><ol><li><p>java.util.Scanner 获取用户的输入。</p></li><li><p>基本语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in)</span><br></pre></td></tr></table></figure></li><li><p>通过Scanner类的Next()和nextLine()方法获取输入的字符串，在读取前我们一般需要使用hasNext()和hasnextLine()判断是否还有输入的数据。</p><ul><li>next()方法一定要读取到有效字符后才可以结束输入；对输入有效字符前遇到的空白，该方法会自动将其去掉；<strong>不能等得到带有空格的字符串</strong>。</li><li>nextLine()方法以输入回车之前的所有字符，可以获得空白。</li></ul></li><li><p>此外通过Scanner还可以接收到整数nextInt()，浮点数nextDouble，等其他方法。</p></li><li><p>凡是IO流使用完都要关掉。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scanner.close();</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-顺序结构"><a href="#2-顺序结构" class="headerlink" title="2.顺序结构"></a>2.顺序结构</h3><ol><li>Java的基本结构就是顺序结构，除非特别指明，否则按照顺序一句一句执行。</li><li>顺序结构是最简单的算法结构。</li><li>语句与语句之间，框与框之间是按从上到下的顺序进行的，它是由若干个以此执行的处理步骤组成的，<strong>它是任何一个算法都离开的一种基本算法结构。</strong></li></ol><h3 id="3-选择结构"><a href="#3-选择结构" class="headerlink" title="3.选择结构"></a>3.选择结构</h3><ol><li><p>if单选择结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">过关斩将：</span><br><span class="line"><span class="keyword">if</span>(布尔表达式) &#123;</span><br><span class="line"><span class="comment">//如果布尔表达式为true将执行语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>if双选择结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式) &#123;</span><br><span class="line"><span class="comment">//如果布尔表达式为true将执行语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//如果布尔表达式为false将执行语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>if多选择结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式) &#123;</span><br><span class="line"><span class="comment">//如果布尔表达式为true将执行语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>() &#123;</span><br><span class="line"><span class="comment">//如果布尔表达式为true将执行语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>() &#123;</span><br><span class="line"><span class="comment">//如果布尔表达式为true将执行语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>() &#123;</span><br><span class="line"><span class="comment">//如果布尔表达式为true将执行语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//如果布尔表达式为false将执行语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>嵌套的if结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式) &#123;</span><br><span class="line"><span class="comment">//如果布尔表达式为true将执行语句</span></span><br><span class="line"><span class="keyword">if</span>(布尔表达式) &#123;</span><br><span class="line"><span class="comment">//如果布尔表达式为true将执行语句</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>switch多选择结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression) &#123;<span class="comment">//int char String</span></span><br><span class="line"><span class="keyword">case</span> value:</span><br><span class="line"><span class="comment">//语句</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> value:</span><br><span class="line"><span class="comment">//语句</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//可以有多个case语句</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="comment">//语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-循环结构"><a href="#4-循环结构" class="headerlink" title="4.循环结构"></a>4.循环结构</h3><ol><li><p>while循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(布尔表达式) &#123;</span><br><span class="line"><span class="comment">//循环内容</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">//死循环，尽量不要使用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>只要布尔表达式为true，循环就会一直执行下去。</li><li>我们大多数情况会让循环停止下来的，我们需要一个让表达式失效的方式来结束循环。</li></ul></li><li><p>do…while循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="comment">//语句</span></span><br><span class="line">&#125; <span class="keyword">while</span>(布尔表达式);</span><br></pre></td></tr></table></figure></li><li><p>while和do…while的区别</p><ul><li>while先判断后执行，do…while是先执行后判断。</li><li>do…while总是爆炸循环体会被至少执行一次！这是主要区别。</li></ul></li><li><p>for循环</p><ul><li><p>for循环语句是支持迭代的一种通用结构，<strong>是最有效、最灵活的循环结构</strong>。</p></li><li><p>for循环执行的次数是在执行前就确定的。</p></li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化; 布尔表达式; 迭代) &#123;</span><br><span class="line"><span class="comment">//代码语句</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(; ; 迭代) &#123;<span class="comment">//死循环</span></span><br><span class="line"><span class="comment">//代码语句</span></span><br><span class="line">&#125;</span><br><span class="line">练习题：打印九九乘法表</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; i; j++) &#123;</span><br><span class="line">                System.out.print(j + <span class="string">&quot;*&quot;</span> + i + <span class="string">&quot;=&quot;</span> + (i * j) + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();<span class="comment">//换行</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li><li><p>增强for循环</p><ul><li>声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块中，其值与此时数组元素的值是否相等。</li><li>表达式：表达式是要访问的数组名，或者是返回值为数组的方法。</li><li>主要用于<strong>数组</strong>和<strong>集合</strong>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(声明语句 : 表达式) &#123;</span><br><span class="line"><span class="comment">//代码句子</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>break、continue</p><ul><li>break语句跳出当前循环或选择语句（while和switch），强制退出循环，会继续执行下面语句。</li><li>continue语句用在循环语句体中，用于终止某次循环过程，即跳过循环体中尚未执行的语句，接着进行下一次是否执行循环的判定。</li></ul></li></ol><h2 id="三、方法"><a href="#三、方法" class="headerlink" title="三、方法"></a>三、方法</h2><h3 id="1-何谓方法"><a href="#1-何谓方法" class="headerlink" title="1.何谓方法"></a>1.何谓方法</h3><ol><li>Java方法是语句的集合，它们在一起执行一个功能<ul><li>方法是解决一类问题的步骤的有序组合</li><li>方法包含类或对象中</li><li>方法在程序中被创建，在其他地方被引用</li></ul></li><li>设计方法的原则：方法的本意是功能块，就是实现某个功能的语句块的集合。<strong>一个方法只完成1个功能，这样利于我们后期的扩展。</strong></li><li>System.out.println(); 类.out对象.println方法</li></ol><h3 id="2-方法的定义及调用"><a href="#2-方法的定义及调用" class="headerlink" title="2.方法的定义及调用"></a>2.方法的定义及调用</h3><ol><li>Java的方法类似于其他语言的函数，是一段用来完成特定功能的代码片段，一般情况下，定义一个方法包含一下语法：<ul><li>方法包含一个方法头和一个方法体。下面是一个方法的所有部分：</li><li>修饰符：这是可选的，告诉编译器如何调用该方法，定义了该方法的访问类型。</li><li>返回值类型：方法可能有返回值。returnValueType是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。在这种情况下，关键字是void。</li><li>方法名：是方法的实际名称。方法名和参数表共同构成方法签名。</li><li>参数类型：<ul><li>形式参数：在方法被调用时用于接收外接输入的数据。</li><li>实参：调用方法时实际传给方法的数据。</li></ul></li><li>方法体：包含具体的语句，定义该方法的功能。</li></ul></li><li>方法的调用<ul><li>调用方法：对象名.方法名(实参列表)</li><li>Java支持两种调用方法的方式，根据方法是返回值来选择。</li><li>当方法返回一个值的时候，方法调用通常被当做一个值。例如：int larger &#x3D; max(30, 40);</li><li>如果方法返回值是void，方法调用一定是一条语句。</li><li>System.out.println(“hello,java!”);</li></ul></li></ol><h3 id="3-方法重载"><a href="#3-方法重载" class="headerlink" title="3.方法重载"></a>3.方法重载</h3><ol><li>重载就是在一个类中，有相同的函数名称，但形参不同的函数。</li><li>方法的重载规则：<ul><li>方法名称必须相同。</li><li>参数列表必须不同(个数不同、或类型不同、参数排列顺序不同等)。</li><li>方法的返回类型可以相同也可以不相同。</li><li>仅仅返回类型不同不足以成为方法的重载。</li></ul></li><li>实现理论：<ul><li>方法名称相同时，编译器会根据调用方法的参数个数、参数类型等去逐个匹配，以选择对应的方法，如果匹配失败，则编译报错。</li></ul></li></ol><h3 id="4-命令行传参"><a href="#4-命令行传参" class="headerlink" title="4.命令行传参"></a>4.命令行传参</h3><ol><li>有时候你希望运行一个程序时候再传递给他消息。这要靠传递命令行参数给main()函数实现。</li></ol><h3 id="5-可变参数"><a href="#5-可变参数" class="headerlink" title="5.可变参数"></a>5.可变参数</h3><ol><li>JDK1.5开始，Java支持传递同类型的可变参数给一个方法。</li><li>在方法声明中，在指定参数类型后加一个省略号(…)。</li><li>一个方法中只能指定一个可变参数，她必须是方法的最后一个参数。任何普通的参数必须在它之前声明。</li></ol><h3 id="6-递归"><a href="#6-递归" class="headerlink" title="6.递归"></a>6.递归</h3><ol><li>A方法调用B方法，我们很容易理解！</li><li>递归就是：A方法调用A方法！就是自己调用自己</li><li>递归的能力在于用有限的语句来定义对象的无限集合。</li><li>递归结构包括两个部分：<ul><li>递归头：什么时候不调用自身方法。如果没有头，将陷入死循环。</li><li>递归体：什么时候需要调用自身方法。</li></ul></li></ol><h2 id="四、数组"><a href="#四、数组" class="headerlink" title="四、数组"></a>四、数组</h2><h3 id="1-数组概述"><a href="#1-数组概述" class="headerlink" title="1.数组概述"></a>1.数组概述</h3><ol><li>数组是<strong>相同类型</strong>数据的<strong>有序</strong>集合。</li><li>数组描述的是相同类型的若干数据，按照一定的先后次序排列组合而成。</li><li>其中，每一个数据乘作一个数组元素，每个数组元素可以通过一个下标来访问他们。<strong>下标从0开始</strong>。</li></ol><h3 id="2-数组声明创建"><a href="#2-数组声明创建" class="headerlink" title="2.数组声明创建"></a>2.数组声明创建</h3><ol><li><p>首先声明数组变量，才能在程序中使用数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dataType[] arrayRefVar;<span class="comment">//首选方法</span></span><br><span class="line">dataType arrayRefVar[];<span class="comment">//不建议使用</span></span><br></pre></td></tr></table></figure></li><li><p>Java语言使用new操作符来创建数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataType[] arrayRefVar = <span class="keyword">new</span> <span class="title class_">dataType</span>[arraySize]</span><br></pre></td></tr></table></figure></li><li><p>数组的元素是通过索引访问的，<strong>数组索引从0开始</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrays.length</span><br></pre></td></tr></table></figure></li><li><p>获取数组长度。</p></li><li><p>静态初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">Man[] mans = &#123;<span class="keyword">new</span> <span class="title class_">Man</span>(<span class="number">1</span>, <span class="number">1</span>), <span class="keyword">new</span> <span class="title class_">Man</span>(<span class="number">2</span>, <span class="number">2</span>)&#125;;<span class="comment">//引用类型</span></span><br></pre></td></tr></table></figure></li><li><p>动态初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">a[<span class="number">1</span>] = <span class="number">2</span>;</span><br></pre></td></tr></table></figure></li><li><p>数组的默认初始化</p><ul><li>数组是引用类型，它的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素被按照实例变量同样的方式被隐式初始化。</li></ul></li><li><p>数组的长度是确定的。</p></li><li><p>数组的元素必须是相同类型的，不允许出现混合类型。</p></li><li><p>数组变量属于引用类型，数组也可以看成是对象，数组中的每个元素相当于该对象的成员变量。<strong>数组对象本身是在堆中的。</strong></p></li><li><p>下标的合法区间[0,length-1]。</p><ul><li>ArrayIndexOutOfBoundsException 数组下标越界异常！</li></ul></li></ol><h3 id="3-数组使用"><a href="#3-数组使用" class="headerlink" title="3.数组使用"></a>3.数组使用</h3><ol><li><p>For-Each循环 适合打印输出 遍历元素。</p></li><li><p>数组作方法入参</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arrays = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] reverse = reverse(arrays); <span class="comment">//调用方法reverse</span></span><br><span class="line">        printArray(reverse); <span class="comment">//调用方法printArray</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//反转数组方法</span></span><br><span class="line">    pulic <span class="keyword">static</span> <span class="type">int</span>[] reverse(<span class="type">int</span>[] arrays) &#123;</span><br><span class="line">    <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[arrays.length];</span><br><span class="line">        <span class="comment">//反转操作</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = result.length - <span class="number">1</span>; i &lt; arrays.length; i++, j--) &#123;</span><br><span class="line">            result[j] = arrays[i];</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印数组方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] arrays)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">    System.out.print(arrays[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数组作返回值</p></li></ol><h3 id="4-多维数组"><a href="#4-多维数组" class="headerlink" title="4.多维数组"></a>4.多维数组</h3><ol><li><p>多维数组可以看成是数组的数组，比如二维数组就是一个特殊的一位数组，其每一个元素都是一个一维数组。</p></li><li><p>二维数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">5</span>]; <span class="comment">//可以看成是2行5列的数组</span></span><br><span class="line"><span class="type">int</span>[][] array = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125;, &#123;<span class="number">5</span>, <span class="number">6</span>&#125;&#125;;</span><br><span class="line">array[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">array[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">array[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">3</span>;</span><br><span class="line">array.length = <span class="number">3</span>;</span><br><span class="line">array[<span class="number">0</span>].length = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//打印输出数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; array[i].length; j++) &#123;</span><br><span class="line">System.out.println(array[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="5-Arrays类"><a href="#5-Arrays类" class="headerlink" title="5.Arrays类"></a>5.Arrays类</h3><ol><li><p>数组的工具类java.util.Arrays</p></li><li><p>可查看JDK帮助文档</p></li><li><p>Arrays类中的方法都是static修饰的静态方法，在使用的时候可以直接使用类名进行调用，而<strong>不用</strong>使用对象来调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Arrays.toString(array);<span class="comment">//该方法打印数组</span></span><br><span class="line">Arrays.sort(array);<span class="comment">//该方法升序数组</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="6-冒泡排序"><a href="#6-冒泡排序" class="headerlink" title="6.冒泡排序"></a>6.冒泡排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] sort(<span class="type">int</span>[] array)&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt; array.length -<span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j&lt;array.length - <span class="number">1</span> -i; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(array[j + <span class="number">1</span>] &lt; array[j]) &#123;</span><br><span class="line">temp = array[j];</span><br><span class="line">array[j] = array[j + <span class="number">1</span>];</span><br><span class="line">array[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-稀疏数组"><a href="#7-稀疏数组" class="headerlink" title="7.稀疏数组"></a>7.稀疏数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] array1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">array1[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">array1[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;输出原始的数组：&quot;</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span>[] ints : array1) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> anInt : ints) &#123;</span><br><span class="line">System.out.print(anInt + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.print();</span><br><span class="line"><span class="comment">//转换为稀疏数组</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">11</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(array[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">sum++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建稀疏数组</span></span><br><span class="line"><span class="type">int</span>[][] array2 = <span class="keyword">new</span> <span class="title class_">int</span>[sum+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">array[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">11</span>;</span><br><span class="line">array[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">11</span>;</span><br><span class="line">array[<span class="number">0</span>][<span class="number">2</span>] = sum;</span><br><span class="line"><span class="comment">//遍历二维数组将值存入到稀疏数组里</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array1.length; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array[i].length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(array[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">count++;</span><br><span class="line">array2[count][<span class="number">0</span>] = i;<span class="comment">//保存行</span></span><br><span class="line">array2[count][<span class="number">1</span>] = j;<span class="comment">//保存列</span></span><br><span class="line">array2[count][<span class="number">2</span>] = array[i][j];<span class="comment">//保存值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出稀疏数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array2.length; i++) &#123;</span><br><span class="line">System.out.print(aray2[i][<span class="number">0</span>] + <span class="string">&quot;\t&quot;</span> + aray2[i][<span class="number">1</span>] + <span class="string">&quot;\t&quot;</span> +aray2[i][<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(<span class="string">&quot;还原数组&quot;</span>);</span><br><span class="line"><span class="type">int</span>[][] array3 = <span class="keyword">new</span> <span class="title class_">int</span>[array2[<span class="number">0</span>][<span class="number">0</span>]][array2[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; array2.length; i++) &#123;</span><br><span class="line">array3[array2[i][<span class="number">0</span>]][array2[i][<span class="number">1</span>]] = array2[i][<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印还原数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span>[] ints : array1) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> anInt : ints) &#123;</span><br><span class="line">System.out.print(anInt + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、面向对象-OOP"><a href="#五、面向对象-OOP" class="headerlink" title="五、面向对象(OOP)"></a>五、面向对象(OOP)</h2><h3 id="1-初识面向对象"><a href="#1-初识面向对象" class="headerlink" title="1.初识面向对象"></a>1.初识面向对象</h3><ol><li>面向过程思想<ul><li>步骤清晰简单，第一步做什么，第二步做什么…</li><li>适合处理一些较为简单的问题</li></ul></li><li>面向对象思想<ul><li>物以类聚，分类的思维模式，</li><li>适合处理复杂的问题，适合处理需要多人协作的问题！</li></ul></li><li>对于描述复杂的事物，为了从宏观上把握，从整体上合理分析，我们需要使用面向对象的思路来分析整个系统。但是具体到微观操作，仍然需要面向过程的思路去处理。</li><li>面向对象(Object-Oriented Programming,OOP)<ul><li>面向对象编程的本质就是：<strong>以类的方式组织代码，以对象的组织(封装)数据。</strong></li><li>三大特性：<ul><li>封装</li><li>继承</li><li>多态</li></ul></li></ul></li></ol><h3 id="2-方法回顾和加深"><a href="#2-方法回顾和加深" class="headerlink" title="2.方法回顾和加深"></a>2.方法回顾和加深</h3><ol><li>方法的定义<ul><li>修饰符</li><li>返回类型</li><li>break:跳出switch，结束循环和return的区别</li><li>方法名</li><li>参数列表</li><li>异常抛出</li></ul></li><li>方法的调用<ul><li>静态方法</li><li>非静态方法</li><li>形参和实参</li><li>值传递和引用传递</li><li>this关键字</li></ul></li></ol><h3 id="3-对象的创建分析"><a href="#3-对象的创建分析" class="headerlink" title="3.对象的创建分析"></a>3.对象的创建分析</h3><ol><li>类是一种抽象的数据类型，它是对某一类事物整体描述&#x2F;定义，但是并不能代表某一个具体的事物。</li><li>对象是抽象概念的具体实例。</li><li><strong>一个项目应该只存在一个main方法</strong>。</li><li>使用<strong>new</strong>关键字创建对象。</li><li>类中的<strong>构造器</strong>也称构造方法，是在进行创建对象的时候必须要调用的。并且构造器有一下两个特点：<ol><li>必须和类的名字相同</li><li>必须没有返回类型，也不能写void</li><li>new 本质在调用构造方法</li><li>初始化对象的值</li><li>定义有参构造之后，如果想使用无参构造，显示的定义一个无参的构造</li></ol></li></ol><h3 id="4-面向对象三大特性"><a href="#4-面向对象三大特性" class="headerlink" title="4.面向对象三大特性"></a>4.面向对象三大特性</h3><ol><li><p>封装</p><ol><li>该露的露，该藏的藏。<strong>“高内聚，低耦合”</strong>。</li><li>属性私有，<strong>get&#x2F;set方法</strong>。</li><li>提高程序安全性，保护数据。</li><li>隐藏代码细节。</li><li>统一接口。</li><li>提高系统可维护性。</li></ol></li><li><p>继承</p><ol><li>继承的本质是对某一批类的抽象，从而实现对现实世界更好的建模。</li><li>extands的意思“扩展”，子类是父类的扩展。</li><li>Java中只有单继承，没有多继承！</li><li>继承是类和类之间的一种关系。除此之外，类和类之间的关系还有依赖、组合、聚合等。</li><li>继承是 is a 的关系。</li><li>super关键字<ol><li>super()调用父类的构造方法，必须在构造方法的第一个。</li><li>super必须只能出现在子类的方法或者构造方法中。</li><li>super和this不能同时调用构造方法。</li></ol></li><li>this关键字<ol><li>表示本身调用者这个对象。</li><li>没有继承也可以使用。</li><li>本类的构造方法。</li></ol></li><li>方法的重写<ol><li>需要有继承关系，子类重写父类的<strong>方法</strong>。</li><li>方法名必须相同，参数列表必须相同，修饰符范围可以扩大不能缩小。(public&gt;protected&gt;default&gt;private)</li><li>抛出的异常范围可以缩小但不能扩大。</li></ol></li></ol></li><li><p>多态</p><ol><li>是方法的多态。</li><li>父类和子类存在关系，类型转换异常(ClassCastException)</li><li>继承关系，方法需要重写，父类引用指向子类对象！</li><li>static方法不能重写，final修饰常量；private私有方法也不能重写。</li><li>instanceof关键字。</li><li>向上转型：把子类转换成父类。</li><li>向下转型：把父类转换成子类，强制转换。</li><li>final修饰的类就不能被继承。</li></ol></li><li><p>代码块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态导入包</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.reandom;</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;匿名代码块&quot;</span>);<span class="comment">//输出顺序2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;匿名代码块&quot;</span>);<span class="comment">//输出顺序1，只执行一次</span></span><br><span class="line">&#125;</span><br><span class="line">pulic <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;构造方法&quot;</span>);<span class="comment">//输出顺序3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="5-抽象类和接口"><a href="#5-抽象类和接口" class="headerlink" title="5.抽象类和接口"></a>5.抽象类和接口</h3><ol><li><strong>abstract</strong>修饰符的类；<ol><li>不能new这个抽象类，只能靠子类去实现它。</li><li>抽象类可以没有抽象方法，抽象方法必须在抽象类中。</li><li>抽象类可以提高开发效率。</li></ol></li><li>接口就是规范，<strong>接口的本质是契约</strong>，关键字interface。<ol><li>接口中的所有定义其实都是抽象的public abstract(可不写)；</li><li>一个类可以实现多个接口，关键字<strong>implements</strong>；</li><li>实现了接口的类，就<strong>必须重写</strong>接口中的方法；</li><li>定义的属性都是常量，public static final；</li></ol></li></ol><h3 id="6-内部类"><a href="#6-内部类" class="headerlink" title="6.内部类"></a>6.内部类</h3><ol><li><p>成员内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;这是外部类的方法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">in</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;这是内部类的方法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>内部类可以直接访问外部类方法和属性，不需要创建外部类的对象。</li></ol></li><li><p>静态内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;这是外部类的方法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">in</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;这是静态内部类的方法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>局部内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Inner</span> &#123;<span class="comment">//局部内部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">in</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>匿名内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Apple</span>.eat();</span><br><span class="line"><span class="type">UserServie</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserService</span>() &#123;<span class="comment">//匿名内部类</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">pubblic <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Apple</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;吃苹果&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="六、异常"><a href="#六、异常" class="headerlink" title="六、异常"></a>六、异常</h2><h3 id="1-什么是异常"><a href="#1-什么是异常" class="headerlink" title="1.什么是异常"></a>1.什么是异常</h3><ol><li>软件程序在运行过程中，可能遇到异常问题，<strong>Exception</strong>；</li></ol><h3 id="2-异常体系结构"><a href="#2-异常体系结构" class="headerlink" title="2.异常体系结构"></a>2.异常体系结构</h3><ol><li><p>检查性异常。</p></li><li><p>运行时异常。</p></li><li><p>错误error，致命。</p></li><li><p>Java把异常当做对象来处理，并定义一个java.lang.Throwable作为异常的超类。</p></li><li><p>在Java API 中定义了许多异常类，这些异常类分为两大类，错误Error和异常Exception。</p></li></ol><p><img src="https://qiniu.jayish.top/image-20230301153541359.png"></p><h3 id="3-Java异常处理机制"><a href="#3-Java异常处理机制" class="headerlink" title="3.Java异常处理机制"></a>3.Java异常处理机制</h3><ol><li><p>抛出异常</p><ol><li>throw关键字，在代码块里使用，不管程序是否有异常，执行到throw语句一定会抛出一个异常。</li><li>throws关键字，使用在方法上。</li></ol></li><li><p>捕获异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//选中捕获代码，快捷键ctrl + alt + t</span></span><br><span class="line"><span class="keyword">try</span> &#123;<span class="comment">//监控区域</span></span><br><span class="line">System.out.println(a / b);</span><br><span class="line">&#125; <span class="keyword">catch</span>(ArithmeticException e) &#123;<span class="comment">//想要捕获的异常类型</span></span><br><span class="line">System.out.println(<span class="string">&quot;程序出现异常&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;<span class="comment">//善后工作，始终会运行finally</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="4-自定义异常"><a href="#4-自定义异常" class="headerlink" title="4.自定义异常"></a>4.自定义异常</h4><ol><li><p>使用Java内置的异常类可以描述在编程时出现的大部分异常情况。除此之外，用户还可以自定义异常。用户自定义异常类，只需继承Exception类即可。</p></li><li><p>创建自定义异常类；</p></li><li><p>在方法中通过throw关键字抛出异常对象。</p></li><li><p>如果在当前抛出异常的方法中处理异常，可以使用try-catch语句捕获并处理；否则在方法声明处通过throws关键字指明要抛出给方法调用者的异常，继续进行下一步操作。</p></li><li><p>在出现异常方法的调用者中捕获并处理异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyException</span> extands Exception &#123;</span><br><span class="line"><span class="comment">//传递数字 &gt; 10 就抛出异常</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> detail;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.detail = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印异常信息</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;MyException&quot;</span>&#123; + </span><br><span class="line"><span class="string">&quot;detail=&quot;</span> + detail + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;传递参数为：&quot;</span> + a);</span><br><span class="line"><span class="keyword">if</span>(a &gt; <span class="number">10</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyException</span>(a);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">test(<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(MyException e) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;MyException--&gt;&quot;</span> + e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h3><ol><li>处理运行时异常时，采用逻辑去合理规避同时辅助try-catch处理</li><li>在多重catch块后面，可以加一个catch(Exception)来处理可能会被遗漏的异常</li><li>对于不确定的代码，也可以加上try-catch，处理潜在的异常</li><li>尽量去处理异常，切记只是简单的调用printStackTrace()去打印输出</li><li>具体如何处理异常，要根据不同的业务需求和异常类型去决定</li><li>尽量添加finally语句去释放占用的资源(IO流、Scanner、)</li></ol><h2 id="JDBC-API"><a href="#JDBC-API" class="headerlink" title="JDBC API"></a>JDBC API</h2><h3 id="1-DriverManager-驱动管理类"><a href="#1-DriverManager-驱动管理类" class="headerlink" title="1.DriverManager 驱动管理类"></a>1.DriverManager 驱动管理类</h3><ol><li>getConnection(url,user,pwd) 获取到连接</li></ol><h3 id="2-Connection接口"><a href="#2-Connection接口" class="headerlink" title="2.Connection接口"></a>2.Connection接口</h3><ol><li>create Statement 创建Statement 对象</li><li>prepaerdStatement(sql) 生成预处理对象</li></ol><h3 id="3-Statement接口"><a href="#3-Statement接口" class="headerlink" title="3. Statement接口"></a>3. Statement接口</h3><ol><li>executeUpdate(sql)  执行dml语句，返回影响的行数</li><li>executeQuery(sql)  执行查询，返回ResultSet对象</li><li>execute(sql)  执行任意的sql，返回布尔值</li><li>Statement存在Sql注入问题<ul><li>输入用户名为 1‘ or</li><li>输入万能密码为 or ‘1’&#x3D; ‘1</li></ul></li><li>PreparedStatement【预处理】<ul><li>不再使用 + 拼接sql语句，减少语法错误</li><li>有效地解决了Sql注入问题</li><li>大大减少了编译次数，效率较高</li></ul></li></ol><h3 id="4-PreparedStatement接口"><a href="#4-PreparedStatement接口" class="headerlink" title="4.PreparedStatement接口"></a>4.PreparedStatement接口</h3><ol><li>executeUpdate() 执行dml语句</li><li>executeQuery() 执行查询，返回ResultSet对象</li><li>execute() 执行任意sql，返回布尔值</li><li>setString(index,value) 解决sql注入</li><li>setObject(index,value)</li></ol><h3 id="5-ResultSet-结果集"><a href="#5-ResultSet-结果集" class="headerlink" title="5.ResultSet(结果集)"></a>5.ResultSet(结果集)</h3><ol><li>next() 表示向下移动一行，如果没有下一行返回false</li><li>previous() 向上移动一行，如果没有上一行返回false</li><li>getXxx(index or 列名) 可以通过列名得到数据库的数据</li><li>getObject(index or 列名) 返回object对象</li></ol><h2 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h2><ol><li>可以直接将class文件丢入到IDEA里面</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println();<span class="comment">//会换一行输出</span></span><br><span class="line">System.out.print();<span class="comment">//不会会换一行输出</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang注释/常量/变量</title>
      <link href="/2023/05/24/Golang%E6%B3%A8%E9%87%8A-%E5%B8%B8%E9%87%8F-%E5%8F%98%E9%87%8F/"/>
      <url>/2023/05/24/Golang%E6%B3%A8%E9%87%8A-%E5%B8%B8%E9%87%8F-%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="一、注释"><a href="#一、注释" class="headerlink" title="一、注释"></a>一、注释</h2><ol><li>单行注释</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单行注释</span></span><br></pre></td></tr></table></figure><ol start="2"><li>多行注释</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  这是多行注释</span></span><br><span class="line"><span class="comment">  这是一个main函数，这个是go语言启动的入口</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="二、变量"><a href="#二、变量" class="headerlink" title="二、变量"></a>二、变量</h2><ol><li>声明变量使用<strong>var</strong>关键字：</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name <span class="keyword">type</span></span><br><span class="line"><span class="keyword">var</span> 变量名 变量类型</span><br></pre></td></tr></table></figure><pre><code>1. 第一个var是声明变量的关键字2. 第二个name，就是我们的变量名字3. 第三个type，就是用来代表变量的类型4. 命名规则驼峰命名，ex：userInfo</code></pre><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name <span class="type">string</span></span><br><span class="line"><span class="keyword">var</span> age <span class="type">int</span></span><br><span class="line"><span class="keyword">var</span> &#123;<span class="comment">//定义多个变量</span></span><br><span class="line">  name <span class="type">string</span> <span class="comment">//默认值 空</span></span><br><span class="line">  age <span class="type">int</span>  <span class="comment">//默认值 0</span></span><br><span class="line">  addres <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>短变量声明并初始化</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// := 自动推导</span></span><br><span class="line">name := <span class="string">&quot;Jay&quot;</span></span><br><span class="line">age := <span class="number">18</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T,%T&quot;</span>, name, age) <span class="comment">//查看变量类型</span></span><br></pre></td></tr></table></figure><pre><code>1. 定义变量同时显示初始化2. 不能提供数据类型3. 只能在函数内部，不能随便到处定义</code></pre><ol start="3"><li>打印变量内存地址</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num <span class="type">int</span></span><br><span class="line">num = <span class="number">100</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;num:%d,内存地址:%p&quot;</span>, num, &amp;num) <span class="comment">//取地址符， &amp;变量名</span></span><br></pre></td></tr></table></figure><ol start="4"><li>变量的交换</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="type">int</span> = <span class="number">100</span></span><br><span class="line"><span class="keyword">var</span> b <span class="type">int</span> = <span class="number">200</span></span><br><span class="line">b, a = a, b</span><br><span class="line">fmt.Println(a, b)</span><br></pre></td></tr></table></figure><ol start="5"><li>匿名变量</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  a, _ := test() <span class="comment">//匿名变量_</span></span><br><span class="line">  _, b := test() <span class="comment">//匿名变量_</span></span><br><span class="line">  fmt.Println(a)</span><br><span class="line">  fmt.Println(b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> (<span class="type">int</span>, <span class="type">int</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">100</span>, <span class="number">200</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>变量的作用域<ol><li>局部变量</li></ol></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> a <span class="type">int</span> = <span class="number">100</span> <span class="comment">//局部变量</span></span><br><span class="line">  <span class="keyword">var</span> b <span class="type">int</span> = <span class="number">200</span> <span class="comment">//局部变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>    函数体内定义，只能在该函数内使用2. 全局变量</code></pre><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="type">int</span> = <span class="number">100</span> <span class="comment">//全局变量</span></span><br><span class="line"><span class="keyword">var</span> b <span class="type">int</span> = <span class="number">200</span> <span class="comment">//全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>    函数体外定义，在整个go文件都可使用3. 外面定义了全局变量，函数内部还可以定义局部变量，使用**就近原则**</code></pre><h2 id="三、常量"><a href="#三、常量" class="headerlink" title="三、常量"></a>三、常量</h2><ol><li>常量中的数据类型只可以是布尔型、数字型（整数型、浮点型和复数）和字符串型。</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> identifer[<span class="keyword">type</span>] = value</span><br><span class="line"><span class="keyword">const</span> URL <span class="type">string</span> = <span class="string">&quot;www.baidu.com&quot;</span> <span class="comment">//显示定义</span></span><br><span class="line"><span class="keyword">const</span> URL2 = <span class="string">&quot;www.google.cn&quot;</span>       <span class="comment">//隐式定义</span></span><br><span class="line"><span class="keyword">const</span> a, b, c = <span class="number">3.14</span>, <span class="string">&quot;Jay&quot;</span>, <span class="literal">false</span></span><br></pre></td></tr></table></figure><ol start="2"><li>特殊常量-iota</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="literal">iota</span>可以用作枚举值</span><br><span class="line">    <span class="keyword">const</span> (</span><br><span class="line">            a = <span class="literal">iota</span>    <span class="comment">//a=0</span></span><br><span class="line">            b           <span class="comment">//b=1</span></span><br><span class="line">            c           <span class="comment">//c=2</span></span><br><span class="line">            d = <span class="string">&quot;haha&quot;</span>  <span class="comment">//haha</span></span><br><span class="line">            e           <span class="comment">//haha</span></span><br><span class="line">            f = <span class="number">100</span>     <span class="comment">//100</span></span><br><span class="line">            g           <span class="comment">//100</span></span><br><span class="line">            h = <span class="literal">iota</span>    <span class="comment">//iota7</span></span><br><span class="line">            i           <span class="comment">//iota8</span></span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">const</span> (</span><br><span class="line">        j = <span class="literal">iota</span>        <span class="comment">//0</span></span><br><span class="line">        k               <span class="comment">//1</span></span><br><span class="line">        )</span><br><span class="line">        fmt.Println(a, b, c, d, e, f, g, h, i, j, k)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工作笔记</title>
      <link href="/2023/05/24/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/05/24/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="c490ce97cc8697699b128adf04f52c6db2bbaa17cae971efa00c497b47a2c4f3"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo部署到服务器</title>
      <link href="/2023/05/22/hexo%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2023/05/22/hexo%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo部署"><a href="#hexo部署" class="headerlink" title="hexo部署"></a>hexo部署</h1><h2 id="安装常用工具"><a href="#安装常用工具" class="headerlink" title="安装常用工具"></a>安装常用工具</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel</span><br></pre></td></tr></table></figure><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y git</span><br></pre></td></tr></table></figure><h2 id="创建自定用户名和密码"><a href="#创建自定用户名和密码" class="headerlink" title="创建自定用户名和密码"></a>创建自定用户名和密码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd jayish</span><br><span class="line">passwd jayish</span><br></pre></td></tr></table></figure><h2 id="赋予jayish用户权限"><a href="#赋予jayish用户权限" class="headerlink" title="赋予jayish用户权限"></a>赋予jayish用户权限</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 740 /etc/sudoers</span><br><span class="line">vim /etc/sudoers</span><br></pre></td></tr></table></figure><p>输入 i 进入 insert 模式 ，找到 root ALL&#x3D;(ALL) ALL ，在其下方加入一行 jayish ALL&#x3D;(ALL) ALL</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root    ALL=(ALL)       ALL</span><br><span class="line">// 在这里加入代码</span><br><span class="line">jayish  ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure><p>按下 ESC ，输入 wq ，保存 vim 文件。</p><p>修改 sudoers 文件权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 600 /etc/sudoers </span><br><span class="line"><span class="built_in">mkdir</span> /data/www/hexo</span><br><span class="line"><span class="built_in">chown</span> jayish:jayish -R /data/www/hexo</span><br></pre></td></tr></table></figure><h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><p>安装nginx可参考<a href="https://www.runoob.com/linux/nginx-install-setup.html">https://www.runoob.com/linux/nginx-install-setup.html</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/webserver/nginx/conf <span class="comment">#查看nginx.conf文件</span></span><br><span class="line">vim nginx.conf</span><br><span class="line"><span class="comment">#添加代码</span></span><br><span class="line">location ~ /data/www/hexo &#123; </span><br><span class="line">     proxy_pass http://127.0.0.1:4000;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在本地代码hexo目录下"><a href="#在本地代码hexo目录下" class="headerlink" title="在本地代码hexo目录下"></a>在本地代码hexo目录下</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>打开 hexo 的配置文件 _config.yml 修改 Deployment 位置的配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repository:</span> <span class="string">root@116.205.136.160:/home/git/blog.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g // 编译</span><br><span class="line">hexo d //部署</span><br></pre></td></tr></table></figure><p>参考<a href="https://blog.csdn.net/jiaweilovemingming/article/details/124067428">https://blog.csdn.net/jiaweilovemingming/article/details/124067428</a></p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang数据类型</title>
      <link href="/2023/05/22/Golang%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2023/05/22/Golang%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="四、数据类型"><a href="#四、数据类型" class="headerlink" title="四、数据类型"></a>四、数据类型</h2><p><img src="https://qiniu.jayish.top/image-20230531184536399.png"></p><h2 id="1-布尔型"><a href="#1-布尔型" class="headerlink" title="1.布尔型"></a>1.布尔型</h2><p>布尔型的值只可以是常量true或false；var flag bool &#x3D; true</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> isFlag <span class="type">bool</span></span><br><span class="line">fmt.Println(isFlag) <span class="comment">//默认值false</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T,%t&quot;</span>, isFlag, isFlag) <span class="comment">//bool, false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-整数"><a href="#2-整数" class="headerlink" title="2.整数"></a>2.整数</h2><table><thead><tr><th>序号</th><th>类型和描述</th></tr></thead><tbody><tr><td>1</td><td>uint8无符号8位整型(0到255)</td></tr><tr><td>2</td><td>uint16无符号16位整型(0到65535)</td></tr><tr><td>3</td><td>uint32无符号32位整型(0到4294967295)</td></tr><tr><td>4</td><td>uint64无符号64位整型(0到18446744073709551615)</td></tr><tr><td>5</td><td>int8有符号8位整型(-128到127)</td></tr><tr><td>6</td><td>int16有符号16位整型(-32768到32767)</td></tr><tr><td>7</td><td>int32有符号32位整型(-2147483648到2147483647)</td></tr><tr><td>8</td><td>int64有符号64位整型(-9223372036854775808到9223372036854775807)</td></tr></tbody></table><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> age <span class="type">int</span> = <span class="number">18</span></span><br><span class="line">fmt.Println(age)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%T,%d\n&quot;</span>, age, age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-浮点数"><a href="#3-浮点数" class="headerlink" title="3.浮点数"></a>3.浮点数</h2><table><thead><tr><th>序号</th><th>类型和描述</th></tr></thead><tbody><tr><td>1</td><td>float32 IEEE-754 32位浮点型数</td></tr><tr><td>2</td><td>float64 IEEE-754 64位浮点型数(默认)</td></tr><tr><td>3</td><td>complex64 32位实数和虚数</td></tr><tr><td>4</td><td>complex128 64位实数和虚数</td></tr></tbody></table><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> money <span class="type">float64</span> = <span class="number">3.145</span></span><br><span class="line">fmt.Println(money)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%T,%d\n&quot;</span>, age, age) </span><br><span class="line"><span class="comment">//%f默认保留小数点6位数</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T,%.2f\n&quot;</span>, money, money) <span class="comment">//%.2f保留2位；丢失精度，四舍五入</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-字符串型"><a href="#4-字符串型" class="headerlink" title="4.字符串型"></a>4.字符串型</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> str <span class="type">string</span></span><br><span class="line">str = <span class="string">&quot;hello,Golang&quot;</span></span><br><span class="line">fmt.Println(str)</span><br><span class="line">fmt.Println(str + <span class="string">&quot;,study&quot;</span>) <span class="comment">//字符串拼接 +</span></span><br><span class="line"><span class="comment">//转义字符 \&quot;  \n  \t</span></span><br><span class="line">fmt.Println(str + <span class="string">&quot;\&quot;study&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%T,%s\n&quot;</span>, str, str)</span><br><span class="line"><span class="comment">//编码表ASCII字符码</span></span><br><span class="line"><span class="comment">//所有中国汉字GBK表</span></span><br><span class="line"><span class="comment">//全世界的编码表 Unicode编码表</span></span><br><span class="line">v1 := <span class="string">&#x27;A&#x27;</span></span><br><span class="line">v2 := <span class="string">&quot;A&quot;</span></span><br><span class="line">v3 := <span class="string">&#x27;中&#x27;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T,%d\n&quot;</span>, v1, v1) <span class="comment">//int32,65</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T,%s\n&quot;</span>, v2, v2) <span class="comment">//string,A</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T,%d\n&quot;</span>, v3, v3) <span class="comment">//int32,20013</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遍历字符串string</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">str := <span class="string">&quot;hello,jay&quot;</span></span><br><span class="line">fmt.Println(str)</span><br><span class="line"><span class="comment">//获取字符串的长度 len</span></span><br><span class="line">fmt.Println(<span class="string">&quot;字符串的长度为：&quot;</span>, <span class="built_in">len</span>(str))</span><br><span class="line"><span class="comment">//获取指定的字节,下标从 0 开始</span></span><br><span class="line">fmt.Println(<span class="string">&quot;字符打印：&quot;</span>, str[<span class="number">0</span>]) <span class="comment">//输出的是ASCII码表对应的值</span></span><br><span class="line"><span class="comment">//for循环遍历 string</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(str); i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%c&quot;</span>, str[i])</span><br><span class="line"><span class="comment">//fmt.Println(str[i])</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//for range 循环，遍历数组、切片...</span></span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> str &#123;</span><br><span class="line">fmt.Println()</span><br><span class="line">fmt.Print(i)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%c&quot;</span>, v)</span><br><span class="line">fmt.Print(<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-数据类型转换"><a href="#5-数据类型转换" class="headerlink" title="5.数据类型转换"></a>5.数据类型转换</h2><p>Go语言不存在隐式类型转换，因此所有的类型转换都必须显示的声明</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valueOfTypeB = typeB(valueOfTypeA)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := <span class="number">3</span></span><br><span class="line">b := <span class="number">5.0</span></span><br><span class="line"><span class="keyword">var</span> num <span class="type">byte</span> = <span class="number">11</span></span><br><span class="line"><span class="comment">//类型转换</span></span><br><span class="line">c := <span class="type">float64</span>(a)</span><br><span class="line">d := <span class="type">int</span>(b)</span><br><span class="line">e := <span class="type">int</span>(num)</span><br><span class="line">f := <span class="type">byte</span>(a)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, a) <span class="comment">//int</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, b) <span class="comment">//float64</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, c) <span class="comment">//float64</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, d) <span class="comment">//int</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, e) <span class="comment">//int</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, f) <span class="comment">//uint8</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
